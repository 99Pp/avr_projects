
.vscode/avr.build/output.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
__trampolines_start():
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 4c 00 	jmp	0x98	; 0x98 <_exit>

0000007c <__bad_interrupt>:
__vector_22():
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
setup():
/home/pp/Documents/avr_projects/blink.c:34

    }
}

void setup(){
    DDRB |= (1<<ledPin);                    /** set pin led Pin as output */ 
  80:	20 9a       	sbi	0x04, 0	; 4
/home/pp/Documents/avr_projects/blink.c:35
    DDRB &=~(1<<heatSwitch);                /** set heatSwitch as input */
  82:	22 98       	cbi	0x04, 2	; 4
/home/pp/Documents/avr_projects/blink.c:36
    DDRB &=~(1<<pushSwitch);                /** set pushSwitch as input */
  84:	23 98       	cbi	0x04, 3	; 4
/home/pp/Documents/avr_projects/blink.c:37
    PORTB |= (1<<heatSwitch);               /** activate PULL UP */  
  86:	2a 9a       	sbi	0x05, 2	; 5
/home/pp/Documents/avr_projects/blink.c:38
    PORTB |= (1<<pushSwitch);               /** activate PULL UP */  
  88:	2b 9a       	sbi	0x05, 3	; 5
digitalWrite():
/home/pp/Documents/avr_projects/blink.c:24
}

void digitalWrite(volatile uint8_t* reg,uint8_t pin,uint8_t state){
    switch (state){
        case OFF:
            *reg &= ~(1<<pin) ;
  8a:	28 98       	cbi	0x05, 0	; 5
main():
/home/pp/Documents/avr_projects/blink.c:53
    setup();
    while(1)
    {

        
        if(digitalRead(&PINB,heatSwitch))
  8c:	1a 99       	sbic	0x03, 2	; 3
  8e:	fd cf       	rjmp	.-6      	; 0x8a <main+0xa>
/home/pp/Documents/avr_projects/blink.c:60
            digitalWrite(&PORTB,ledPin,OFF);
        }

        else
        {
            if(digitalRead(&PINB,pushSwitch)==OFF)
  90:	1b 99       	sbic	0x03, 3	; 3
  92:	fb cf       	rjmp	.-10     	; 0x8a <main+0xa>
digitalWrite():
/home/pp/Documents/avr_projects/blink.c:27
    switch (state){
        case OFF:
            *reg &= ~(1<<pin) ;
            break;
        case ON:
            *reg |= (1<<pin) ;
  94:	28 9a       	sbi	0x05, 0	; 5
  96:	fa cf       	rjmp	.-12     	; 0x8c <main+0xc>

00000098 <_exit>:
exit():
  98:	f8 94       	cli

0000009a <__stop_program>:
__stop_program():
  9a:	ff cf       	rjmp	.-2      	; 0x9a <__stop_program>
